{"version":3,"sources":["dpoly.js"],"names":["DragDropTouch","DragDropTouch_1","DataTransfer","_dropEffect","_effectAllowed","_data","Object","defineProperty","prototype","get","set","value","enumerable","configurable","keys","clearData","type","getData","setData","setDragImage","img","offsetX","offsetY","ddt","_instance","_imgCustom","_imgOffset","x","y","_lastClick","supportsPassive","document","addEventListener","passive","d","ts","_touchstart","bind","tm","_touchmove","te","_touchend","opt","capture","getInstance","e","_this","_shouldHandle","Date","now","_DBLCLICK","_dispatchEvent","target","preventDefault","_reset","src","_closestDraggable","_dragSource","_ptDown","_getPoint","_lastTouch","setTimeout","_img","_CTXMENU","_getTarget","_getDelta","_THRESHOLD","_createImage","_lastTarget","_moveImage","_destroyImage","indexOf","defaultPrevented","touches","length","_dataTransfer","page","pageX","clientX","pageY","clientY","p","Math","abs","el","pt","elementFromPoint","getComputedStyle","pointerEvents","parentElement","cloneNode","_copyStyle","style","top","left","rc","getBoundingClientRect","opacity","_OPACITY","toString","body","appendChild","removeChild","requestAnimationFrame","s","position","zIndex","round","_copyProps","dst","props","i","_rmvAtts","forEach","att","removeAttribute","HTMLCanvasElement","cSrc","cDst","width","height","getContext","drawImage","cs","key","children","evt","createEvent","t","initEvent","button","which","buttons","_kbdProps","_ptProps","dataTransfer","dispatchEvent","hasAttribute","draggable","split"],"mappings":"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","file":"dpoly.17bea0dc.map","sourceRoot":"..","sourcesContent":["var DragDropTouch;\n(function (DragDropTouch_1) {\n    'use strict';\n    /**\n     * Object used to hold the data that is being dragged during drag and drop operations.\n     *\n     * It may hold one or more data items of different types. For more information about\n     * drag and drop operations and data transfer objects, see\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\">HTML Drag and Drop API</a>.\n     *\n     * This object is created automatically by the @see:DragDropTouch singleton and is\n     * accessible through the @see:dataTransfer property of all drag events.\n     */\n    var DataTransfer = (function () {\n        function DataTransfer() {\n            this._dropEffect = 'move';\n            this._effectAllowed = 'all';\n            this._data = {};\n        }\n        Object.defineProperty(DataTransfer.prototype, \"dropEffect\", {\n            /**\n             * Gets or sets the type of drag-and-drop operation currently selected.\n             * The value must be 'none',  'copy',  'link', or 'move'.\n             */\n            get: function () {\n                return this._dropEffect;\n            },\n            set: function (value) {\n                this._dropEffect = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DataTransfer.prototype, \"effectAllowed\", {\n            /**\n             * Gets or sets the types of operations that are possible.\n             * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',\n             * 'linkMove', 'move', 'all' or 'uninitialized'.\n             */\n            get: function () {\n                return this._effectAllowed;\n            },\n            set: function (value) {\n                this._effectAllowed = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DataTransfer.prototype, \"types\", {\n            /**\n             * Gets an array of strings giving the formats that were set in the @see:dragstart event.\n             */\n            get: function () {\n                return Object.keys(this._data);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Removes the data associated with a given type.\n         *\n         * The type argument is optional. If the type is empty or not specified, the data\n         * associated with all types is removed. If data for the specified type does not exist,\n         * or the data transfer contains no data, this method will have no effect.\n         *\n         * @param type Type of data to remove.\n         */\n        DataTransfer.prototype.clearData = function (type) {\n            if (type != null) {\n                delete this._data[type];\n            }\n            else {\n                this._data = null;\n            }\n        };\n        /**\n         * Retrieves the data for a given type, or an empty string if data for that type does\n         * not exist or the data transfer contains no data.\n         *\n         * @param type Type of data to retrieve.\n         */\n        DataTransfer.prototype.getData = function (type) {\n            return this._data[type] || '';\n        };\n        /**\n         * Set the data for a given type.\n         *\n         * For a list of recommended drag types, please see\n         * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.\n         *\n         * @param type Type of data to add.\n         * @param value Data to add.\n         */\n        DataTransfer.prototype.setData = function (type, value) {\n            this._data[type] = value;\n        };\n        /**\n         * Set the image to be used for dragging if a custom one is desired.\n         *\n         * @param img An image element to use as the drag feedback image.\n         * @param offsetX The horizontal offset within the image.\n         * @param offsetY The vertical offset within the image.\n         */\n        DataTransfer.prototype.setDragImage = function (img, offsetX, offsetY) {\n            var ddt = DragDropTouch._instance;\n            ddt._imgCustom = img;\n            ddt._imgOffset = { x: offsetX, y: offsetY };\n        };\n        return DataTransfer;\n    }());\n    DragDropTouch_1.DataTransfer = DataTransfer;\n    /**\n     * Defines a class that adds support for touch-based HTML5 drag/drop operations.\n     *\n     * The @see:DragDropTouch class listens to touch events and raises the\n     * appropriate HTML5 drag/drop events as if the events had been caused\n     * by mouse actions.\n     *\n     * The purpose of this class is to enable using existing, standard HTML5\n     * drag/drop code on mobile devices running IOS or Android.\n     *\n     * To use, include the DragDropTouch.js file on the page. The class will\n     * automatically start monitoring touch events and will raise the HTML5\n     * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which\n     * should be handled by the application.\n     *\n     * For details and examples on HTML drag and drop, see\n     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.\n     */\n    var DragDropTouch = (function () {\n        /**\n         * Initializes the single instance of the @see:DragDropTouch class.\n         */\n        function DragDropTouch() {\n            this._lastClick = 0;\n            // enforce singleton pattern\n            if (DragDropTouch._instance) {\n                throw 'DragDropTouch instance already created.';\n            }\n            // detect passive event support\n            // https://github.com/Modernizr/Modernizr/issues/1894\n            var supportsPassive = false;\n            document.addEventListener('test', function () { }, {\n                get passive() {\n                    supportsPassive = true;\n                    return true;\n                }\n            });\n            // listen to touch events\n            if ('ontouchstart' in document) {\n                var d = document, ts = this._touchstart.bind(this), tm = this._touchmove.bind(this), te = this._touchend.bind(this), opt = supportsPassive ? { passive: false, capture: false } : false;\n                d.addEventListener('touchstart', ts, opt);\n                d.addEventListener('touchmove', tm, opt);\n                d.addEventListener('touchend', te);\n                d.addEventListener('touchcancel', te);\n            }\n        }\n        /**\n         * Gets a reference to the @see:DragDropTouch singleton.\n         */\n        DragDropTouch.getInstance = function () {\n            return DragDropTouch._instance;\n        };\n        // ** event handlers\n        DragDropTouch.prototype._touchstart = function (e) {\n            var _this = this;\n            if (this._shouldHandle(e)) {\n                // raise double-click and prevent zooming\n                if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {\n                    if (this._dispatchEvent(e, 'dblclick', e.target)) {\n                        e.preventDefault();\n                        this._reset();\n                        return;\n                    }\n                }\n                // clear all variables\n                this._reset();\n                // get nearest draggable element\n                var src = this._closestDraggable(e.target);\n                if (src) {\n                    // give caller a chance to handle the hover/move events\n                    if (!this._dispatchEvent(e, 'mousemove', e.target) &&\n                        !this._dispatchEvent(e, 'mousedown', e.target)) {\n                        // get ready to start dragging\n                        this._dragSource = src;\n                        this._ptDown = this._getPoint(e);\n                        this._lastTouch = e;\n                        e.preventDefault();\n                        // show context menu if the user hasn't started dragging after a while\n                        setTimeout(function () {\n                            if (_this._dragSource == src && _this._img == null) {\n                                if (_this._dispatchEvent(e, 'contextmenu', src)) {\n                                    _this._reset();\n                                }\n                            }\n                        }, DragDropTouch._CTXMENU);\n                    }\n                }\n            }\n        };\n        DragDropTouch.prototype._touchmove = function (e) {\n            if (this._shouldHandle(e)) {\n                // see if target wants to handle move\n                var target = this._getTarget(e);\n                if (this._dispatchEvent(e, 'mousemove', target)) {\n                    this._lastTouch = e;\n                    e.preventDefault();\n                    return;\n                }\n                // start dragging\n                if (this._dragSource && !this._img) {\n                    var delta = this._getDelta(e);\n                    if (delta > DragDropTouch._THRESHOLD) {\n                        this._dispatchEvent(e, 'dragstart', this._dragSource);\n                        this._createImage(e);\n                        this._dispatchEvent(e, 'dragenter', target);\n                    }\n                }\n                // continue dragging\n                if (this._img) {\n                    this._lastTouch = e;\n                    e.preventDefault(); // prevent scrolling\n                    if (target != this._lastTarget) {\n                        this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);\n                        this._dispatchEvent(e, 'dragenter', target);\n                        this._lastTarget = target;\n                    }\n                    this._moveImage(e);\n                    this._dispatchEvent(e, 'dragover', target);\n                }\n            }\n        };\n        DragDropTouch.prototype._touchend = function (e) {\n            if (this._shouldHandle(e)) {\n                // see if target wants to handle up\n                if (this._dispatchEvent(this._lastTouch, 'mouseup', e.target)) {\n                    e.preventDefault();\n                    return;\n                }\n                // user clicked the element but didn't drag, so clear the source and simulate a click\n                if (!this._img) {\n                    this._dragSource = null;\n                    this._dispatchEvent(this._lastTouch, 'click', e.target);\n                    this._lastClick = Date.now();\n                }\n                // finish dragging\n                this._destroyImage();\n                if (this._dragSource) {\n                    if (e.type.indexOf('cancel') < 0) {\n                        this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);\n                    }\n                    this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);\n                    this._reset();\n                }\n            }\n        };\n        // ** utilities\n        // ignore events that have been handled or that involve more than one touch\n        DragDropTouch.prototype._shouldHandle = function (e) {\n            return e &&\n                !e.defaultPrevented &&\n                e.touches && e.touches.length < 2;\n        };\n        // clear all members\n        DragDropTouch.prototype._reset = function () {\n            this._destroyImage();\n            this._dragSource = null;\n            this._lastTouch = null;\n            this._lastTarget = null;\n            this._ptDown = null;\n            this._dataTransfer = new DataTransfer();\n        };\n        // get point for a touch event\n        DragDropTouch.prototype._getPoint = function (e, page) {\n            if (e && e.touches) {\n                e = e.touches[0];\n            }\n            return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };\n        };\n        // get distance between the current touch event and the first one\n        DragDropTouch.prototype._getDelta = function (e) {\n            var p = this._getPoint(e);\n            return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);\n        };\n        // get the element at a given touch event\n        DragDropTouch.prototype._getTarget = function (e) {\n            var pt = this._getPoint(e), el = document.elementFromPoint(pt.x, pt.y);\n            while (el && getComputedStyle(el).pointerEvents == 'none') {\n                el = el.parentElement;\n            }\n            return el;\n        };\n        // create drag image from source element\n        DragDropTouch.prototype._createImage = function (e) {\n            // just in case...\n            if (this._img) {\n                this._destroyImage();\n            }\n            // create drag image from custom element or drag source\n            var src = this._imgCustom || this._dragSource;\n            this._img = src.cloneNode(true);\n            this._copyStyle(src, this._img);\n            this._img.style.top = this._img.style.left = '-9999px';\n            // if creating from drag source, apply offset and opacity\n            if (!this._imgCustom) {\n                var rc = src.getBoundingClientRect(), pt = this._getPoint(e);\n                this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };\n                this._img.style.opacity = DragDropTouch._OPACITY.toString();\n            }\n            // add image to document\n            this._moveImage(e);\n            document.body.appendChild(this._img);\n        };\n        // dispose of drag image element\n        DragDropTouch.prototype._destroyImage = function () {\n            if (this._img && this._img.parentElement) {\n                this._img.parentElement.removeChild(this._img);\n            }\n            this._img = null;\n            this._imgCustom = null;\n        };\n        // move the drag image element\n        DragDropTouch.prototype._moveImage = function (e) {\n            var _this = this;\n            requestAnimationFrame(function () {\n                if (_this._img) {\n                    var pt = _this._getPoint(e, true), s = _this._img.style;\n                    s.position = 'absolute';\n                    s.pointerEvents = 'none';\n                    s.zIndex = '999999';\n                    s.left = Math.round(pt.x - _this._imgOffset.x) + 'px';\n                    s.top = Math.round(pt.y - _this._imgOffset.y) + 'px';\n                }\n            });\n        };\n        // copy properties from an object to another\n        DragDropTouch.prototype._copyProps = function (dst, src, props) {\n            for (var i = 0; i < props.length; i++) {\n                var p = props[i];\n                dst[p] = src[p];\n            }\n        };\n        DragDropTouch.prototype._copyStyle = function (src, dst) {\n            // remove potentially troublesome attributes\n            DragDropTouch._rmvAtts.forEach(function (att) {\n                dst.removeAttribute(att);\n            });\n            // copy canvas content\n            if (src instanceof HTMLCanvasElement) {\n                var cSrc = src, cDst = dst;\n                cDst.width = cSrc.width;\n                cDst.height = cSrc.height;\n                cDst.getContext('2d').drawImage(cSrc, 0, 0);\n            }\n            // copy style (without transitions)\n            var cs = getComputedStyle(src);\n            for (var i = 0; i < cs.length; i++) {\n                var key = cs[i];\n                if (key.indexOf('transition') < 0) {\n                    dst.style[key] = cs[key];\n                }\n            }\n            dst.style.pointerEvents = 'none';\n            // and repeat for all children\n            for (var i = 0; i < src.children.length; i++) {\n                this._copyStyle(src.children[i], dst.children[i]);\n            }\n        };\n        DragDropTouch.prototype._dispatchEvent = function (e, type, target) {\n            if (e && target) {\n                var evt = document.createEvent('Event'), t = e.touches ? e.touches[0] : e;\n                evt.initEvent(type, true, true);\n                evt.button = 0;\n                evt.which = evt.buttons = 1;\n                this._copyProps(evt, e, DragDropTouch._kbdProps);\n                this._copyProps(evt, t, DragDropTouch._ptProps);\n                evt.dataTransfer = this._dataTransfer;\n                target.dispatchEvent(evt);\n                return evt.defaultPrevented;\n            }\n            return false;\n        };\n        // gets an element's closest draggable ancestor\n        DragDropTouch.prototype._closestDraggable = function (e) {\n            for (; e; e = e.parentElement) {\n                if (e.hasAttribute('draggable') && e.draggable) {\n                    return e;\n                }\n            }\n            return null;\n        };\n        return DragDropTouch;\n    }());\n    /*private*/ DragDropTouch._instance = new DragDropTouch(); // singleton\n    // constants\n    DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts\n    DragDropTouch._OPACITY = 0.5; // drag image opacity\n    DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click\n    DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event\n    // copy styles/attributes from drag source to drag image element\n    DragDropTouch._rmvAtts = 'id,class,style,draggable'.split(',');\n    // synthesize and dispatch an event\n    // returns true if the event has been handled (e.preventDefault == true)\n    DragDropTouch._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');\n    DragDropTouch._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',');\n    DragDropTouch_1.DragDropTouch = DragDropTouch;\n})(DragDropTouch || (DragDropTouch = {}));\n"]}